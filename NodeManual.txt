Node Module 5.2 Instructions
Assembly:
Start with the main board, doing all the SMD resistors, diodes, capacitor, LED and finally the reset switch. Only populate the sections labeled "INPUT PROTECTION START NODE ONLY" if this is to be a primary/start node. This is actually important, and not just me trying to save you a bit of work. The clock and reset lines won't work properly if more than one module has the input protection for them!
Once all the little stuff is on, do all the large through-hole stuff, leaving the 1.27mm pin headers and sockets until last. Once everything else is done on the main board, couple the 1.27 connectors and insert them into the board. Add the control board on top, and screw the two together with the screws and standoff. Once you are sure everything lines up properly, solder the pin headers/sockets down on both boards.
On the control board, start with the 2 SMD resistors. They will be bascially impossible to do once the jacks are in place, so don't forget them! Then insert all the jacks, pots and the LED switch. If this is a secondary Node, skip the clock/reset jacks. If you use the panel to align everything, as per standard practice, you'll see there aren't any holes for clock/reset on the secondary Node panel, so it will be hard to mess that up. Once you're convinced it all looks good, solder everything down.
Finally, you'll have to assemble the passthru cables. I'm sorry, it's a huge pain, but Digikey just didn't have any complete premade cables. If you wanted to double up the cables on the BOM order so you just need to solder wires together, I wouldn't blame you. (These were originally normal 0.1" pin headers, but I found it was almost impossible the add Nodes to my rack without them pulling loose. The locking connectors are a bit of a pain, but definitely worth it.)
Programming:
The ATMEGA328P-PU chips on the BOM are raw, meaning they don't have the Arduino bootloader code burned into them yet. You could spend a bit more to get pre-burned chips, but on this scale it's worth getting a real burner as they're quite cheap. Follow any one of a number of online guides on how to do that. The ICSP pin header on the control makes connecting the burner quite easy.
Once the bootloader is in place the generic ATMEGA328P-PU has been transmutated into an Arduino chip, you'll need to install the software. This requires a different little USB dongle, I'm afraid, but it really makes the whole process a lot easier. Attach this to the FTDI port and use the standard Arduino development tools to install the software.
Use:
The daisy-chained passthrus carry power, so only the Primary Node needs to be connected to power. Make sure it has its START NODE? jumper in place, so the code running on it knows it is a primary Node. All the other Nodes in the chain should not have the jumper set.
Clock (Primary only): Send your clock signal in here. It is shared with the other Nodes through the passthrus. The clock determines when the chain updates to its next state, sending out trigger signals when it does so. The total time for each Node update loop is around 10ms, so they can theoretically keep up with any clock signal slower than 100 Hz, or 6000 BPM.
Reset (Primary only): Send a trigger here to reset the entire chain. It is shared with the other Nodes through the passthrus. Upon receiving a reset, the primary Node will be triggered and all others will clear their triggered status. This lets you put the chain into a known state easily, adding regularity to complicated patterns. It also allows chains to have dead ends without the worry of a pattern getting stuck forever.
In: These 4 inputs are the triggers for the Node. Any trigger or gate on these will put the Node into its triggered state, which means that on the next clock pulse it will send out a trigger on its main output, as well as one randomly chosen link output.
Outputs #1-#4: These are the link outputs for the Node. When the Node fires, one of these will be randomly chosen. (See details about CV mode below, however.) Each is paired with a potentiometer. The setting of this pot determines how likely each link is to fire. All non-zero values are normalized, meaning that any configuration where all the pots have the same value will result in them all being equally likely to fire. Basically, turn one up if you want that link to be more likely to fire, and turn it down to make it less likely. If the pot is set all the way counterclockwise, that link will never fire. If all the pots are set that way, then none of them will fire.
Out: This is the main output of the Node. It will always fire when the Node fires. It is meant to be used to trigger activity outside of the chain, such as a percusion hit.
Trig: This is a combination LED and push button. It will light up whenever the Node has been triggered. You can also push it to manually trigger the Node.
Modes:
There are two modes possible when running a Node: normal and CV. The above description has all been based on the normal mode. CV is almost exactly the same, except that link #4 will serve as a CV source instead of a trigger.  The #4 potentiometer will no longer set the probability of that link firing, but instead set the CV value (0-5 volts) which will be put on the #4 output when the Node fires. When the Node hasn't fired, the value on the #4 link will be 0 volts. When the Node fires, it will be set to whatever the pot is set to, and held that way for the duration of the clock cycle. On the next clock pulse it will return to 0 volts.
When in CV mode, the other link outputs #1-#3 will work as they normally do. The selection of which link to randomly select when a Node fires will be limited to just those 3.
CV mode lets Nodes be used as a pitch source like a traditional modular sequencer, though they will have to be combined in a mixer first. Also keep in mind that Arduino can't generate arbitrary analog values, so the CV is created using pulse width modulation (PWM) instead. That means that while on average they are the analog value reqested, they are really just switching between 0 and 5 volts very quickly, staying on each the correct proportion of time needed to keep the average voltage correct. This will often result in some very weird, glitchy problems when you try to use the CV in other modules.
------------------------------------------------------------------------------------------------------------------
Please let me know if you have any problems or ideas for future development! This is definitely still a work in progress.
Matthew Dockrey
mrd@attoparsec.com